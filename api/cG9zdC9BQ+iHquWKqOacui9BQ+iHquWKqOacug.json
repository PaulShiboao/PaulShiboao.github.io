{"title":"","date":"2018-12-20T00:20:29.261Z","slug":"AC自动机/AC自动机","updated":"2018-12-20T00:36:01.578Z","content":"<h1 id=\"AC自动机学习笔记\"><a href=\"#AC自动机学习笔记\" class=\"headerlink\" title=\"AC自动机学习笔记\"></a>AC自动机学习笔记</h1><h2 id=\"一、用途\"><a href=\"#一、用途\" class=\"headerlink\" title=\"一、用途\"></a>一、用途</h2><p>AC自动机适用于已知大量模式串，要询问模式串在文本串中的匹配情况的算法。</p>\n<h2 id=\"二、模板的实现\"><a href=\"#二、模板的实现\" class=\"headerlink\" title=\"二、模板的实现\"></a>二、模板的实现</h2><h3 id=\"前置技能：Trie树（字典树）\"><a href=\"#前置技能：Trie树（字典树）\" class=\"headerlink\" title=\"前置技能：Trie树（字典树）\"></a>前置技能：Trie树（字典树）</h3><p>对于所有的模式串，我们使用 $Trie$ 树来存储。</p>\n<h3 id=\"Fail标记\"><a href=\"#Fail标记\" class=\"headerlink\" title=\"Fail标记\"></a>Fail标记</h3><p>为了匹配的效率更高，减少多余运算的次数，我们对于每个结点建立 $Fail$ 标记，当在该结点失配时，直接跳到标记处，因为已经有公共前缀被匹配过了。</p>\n<h3 id=\"Get-Fail标记\"><a href=\"#Get-Fail标记\" class=\"headerlink\" title=\"Get Fail标记\"></a>Get Fail标记</h3><p>所有结点的 $Fail$ 标记时指向离它最近的字典序在它之后的拥有最长公共前缀的结点。所以我们可以用 $bfs$ 的方法搜出所有的 $Fail$ 标记</p>\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><p>我们直接将文本串放入AC自动机中匹配，如果匹配继续往下，否则跳到 $Fail$ 标记处</p>\n<div class=\"article-img\"><p><img src=\"C:\\Users\\Administrator\\Desktop\\MyBlog\\source\\_posts\\AC自动机\\AC自动机.png\" alt=\"AC自动机\"></p></div>\n<p>这是一张很清楚的AC自动机的匹配图</p>\n","next":{"title":"Hello World","slug":"hello-world"},"link":"http://yoursite.com/post/AC自动机/AC自动机/","toc":[{"title":"AC自动机学习笔记","id":"AC自动机学习笔记","index":"1","children":[{"title":"一、用途","id":"一、用途","index":"1.1"},{"title":"二、模板的实现","id":"二、模板的实现","index":"1.2","children":[{"title":"前置技能：Trie树（字典树）","id":"前置技能：Trie树（字典树）","index":"1.2.1"},{"title":"Fail标记","id":"Fail标记","index":"1.2.2"},{"title":"Get Fail标记","id":"Get-Fail标记","index":"1.2.3"},{"title":"查询操作","id":"查询操作","index":"1.2.4"}]}]}]}