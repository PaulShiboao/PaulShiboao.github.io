{"title":"","date":"2018-12-20T02:30:59.330Z","slug":"后缀数组","updated":"2018-12-20T03:03:45.352Z","content":"<h1 id=\"后缀数组\"><a href=\"#后缀数组\" class=\"headerlink\" title=\"后缀数组\"></a>后缀数组</h1><h2 id=\"一、后缀数组的定义\"><a href=\"#一、后缀数组的定义\" class=\"headerlink\" title=\"一、后缀数组的定义\"></a>一、后缀数组的定义</h2><p>把字符串 $s$ 的每个后缀按照字典序排序。</p>\n<p>后缀数组 $sa[i]$ 就表示<strong>排名为i的后缀</strong>的起始位置的下标</p>\n<p>而它的映射数组 $rk[i]$ 就表示<strong>起始位置的下标为i的后缀</strong>的排名</p>\n<h2 id=\"二、后缀数组的求法-（倍增）\"><a href=\"#二、后缀数组的求法-（倍增）\" class=\"headerlink\" title=\"二、后缀数组的求法 （倍增）\"></a>二、后缀数组的求法 （倍增）</h2><p>我们首先对于 $s$ 的单个字符按照字典序排序，排序结果用 $sa[i]$ 存储，如果字典序相同按照开头下标位置排序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) c[x[i]=s[i]]++;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=m;i++) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;i--) sa[c[x[i]]--]=i;</span><br></pre></td></tr></table></figure>\n<p>$c$ 数组类似于前缀和，可以快速求出比它小的子串个数</p>\n<p>然后每次我们将处理出的串于其相邻的串合并</p>\n<div class=\"article-img\"><p><img src=\"C:\\Users\\Administrator\\Desktop\\MyBlog\\source\\_posts\\后缀数组.jpg\" alt=\"后缀数组\"></p></div>\n<p>如上图，我们第 $i$ 次排序时，可以得出以每个位置开头，向后的 $i$个字符的 $sa[]$ 数组，为了求取长度为 $n$ 的后缀数组，且达到优秀的时间复杂度，我们每次合并两串字符串的排名，例如第 $i$ 次排序，我们合并第 $k$ 个和第 $k+2^{i}$ 个的排名，因为字典序是从前往后的，所以我们把第 $k$ 个的排名设为第 $1$ 关键字，第 $k+2^{i}$ 个的排名设为第 $2$ 关键字，我们使用基数排序来 $O（N）$ 排序。</p>\n<p>因为总共会有 $log_N$ 次排序，所以时间复杂度为 $O（N log_N）$</p>\n<p>对于这个操作还有优化，在排序时如果发现此时排名已经各不相同了，直接退出即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;k&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n-k+<span class=\"number\">1</span>;i&lt;=n;i++) y[++p]=i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sa[i]&gt;k) y[++p]=sa[i]-k;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) c[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) c[x[y[i]]]++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=m;i++) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;i--) sa[c[x[y[i]]]--]=y[i];</span><br><span class=\"line\">\tswap (x,y);</span><br><span class=\"line\">\tp=<span class=\"number\">1</span>;x[sa[<span class=\"number\">1</span>]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t\tx[sa[i]]=y[sa[i]]==y[sa[i<span class=\"number\">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class=\"number\">-1</span>]+k]?p:++p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p==n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\tm=p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、最长公共前缀（LCP）\"><a href=\"#三、最长公共前缀（LCP）\" class=\"headerlink\" title=\"三、最长公共前缀（LCP）\"></a>三、最长公共前缀（LCP）</h2><h3 id=\"LCP的定义\"><a href=\"#LCP的定义\" class=\"headerlink\" title=\"LCP的定义\"></a>LCP的定义</h3><p> $LCP (i,j)$ 为 $suff (sa[i])$ 和 $suff (sa[j])$ 的最长公共前缀</p>\n<h3 id=\"LCP的性质\"><a href=\"#LCP的性质\" class=\"headerlink\" title=\"LCP的性质\"></a>LCP的性质</h3><ul>\n<li><p>$LCP (i,j)=LCP (j,i)$</p>\n</li>\n<li><p>$LCP (i,i)=len (sa[i])=n-sa[i]+1$</p>\n</li>\n<li><p>$LCP (i,k)=min (LCP (i,j),LCP (j,k))$  $\\forall 1\\leq i \\leq j\\leq k\\lq n$</p>\n<p>证明：</p>\n<p>设 $p=min{LCP (i,j),LCP (j,k)}$，则有 $LCP (i,j)\\geq p,LCP (j,k)\\geq p$。</p>\n<p>设 $suff (sa[i])=u , suff (sa[j])=v,suff (sa[k])=w$</p>\n<p>所以 $u$ 和 $v$ 的前 $p$ 个字符相等，$v$ 和$w$ 的前 $p$ 个字符相等</p>\n<p>所以 $u$ 和 $w$ 的前 $p$ 的字符相等，$LCP(i,k)\\geq p$</p>\n<p>设 $LCP (i,k)=q&gt;p$ 那么 $q\\geq p+1$</p>\n<p>因为 $p=min{LCP (i,j) , LCP (j,k)}$，所以 $u[p+1]!=v[p+1]$ 或者 $v[p+1]!=w[p+1]$</p>\n<p>但是 $u[p+1]=w[p+1]$ 这不就自相矛盾了吗</p>\n<p>所以 $LCP(i,k)\\leq p$</p>\n<p>综上所述 $LCP (i,k)=p=min{LCP (i,j),LCP (j,k)}$</p>\n</li>\n</ul>\n","next":{"title":"","slug":"AC自动机"},"link":"http://yoursite.com/post/后缀数组/","toc":[{"title":"后缀数组","id":"后缀数组","index":"1","children":[{"title":"一、后缀数组的定义","id":"一、后缀数组的定义","index":"1.1"},{"title":"二、后缀数组的求法 （倍增）","id":"二、后缀数组的求法-（倍增）","index":"1.2"},{"title":"三、最长公共前缀（LCP）","id":"三、最长公共前缀（LCP）","index":"1.3","children":[{"title":"LCP的定义","id":"LCP的定义","index":"1.3.1"},{"title":"LCP的性质","id":"LCP的性质","index":"1.3.2"}]}]}]}